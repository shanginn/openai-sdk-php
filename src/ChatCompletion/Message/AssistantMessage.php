<?php

declare(strict_types=1);

namespace Shanginn\Openai\ChatCompletion\Message;

use Shanginn\Openai\ChatCompletion\CompletionRequest\Role;
use Shanginn\Openai\ChatCompletion\Message\Assistant\ToolCallInterface;
use Crell\Serde\Attributes as Serde;
use Crell\Serde\Renaming\Cases;
use InvalidArgumentException;

#[Serde\ClassSettings(
    renameWith: Cases::snake_case,
    omitNullFields: true
)]
class AssistantMessage implements MessageInterface
{
    /**
     * @var Role the role of the messages author, in this case "assistant"
     */
    public Role $role;

    /**
     * @param string|null                   $content   The contents of the assistant message. Required unless tool_calls is specified.
     * @param string|null                   $name      An optional name for the participant.
     *                                                 Provides the model information to differentiate between participants of the same role.
     * @param string|null                   $refusal   the refusal message generated by the model
     * @param array<ToolCallInterface>|null $toolCalls the tool calls generated by the model, such as function calls
     */
    public function __construct(
        public ?string $content = null,
        public ?string $name = null,
        public ?string $refusal = null,
        #[Serde\SequenceField(arrayType: ToolCallInterface::class)]
        public ?array $toolCalls = null,
    ) {
        $this->role = Role::ASSISTANT;

        if ($content === null && $toolCalls === null) {
            throw new InvalidArgumentException('Either content or toolCalls must be provided.');
        }
    }

    public static function withToolCalls(self $oldMessage, array $toolCalls): self
    {
        return new self(
            $oldMessage->content,
            $oldMessage->name,
            $oldMessage->refusal,
            $toolCalls,
        );
    }
}
