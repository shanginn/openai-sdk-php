<?php

declare(strict_types=1);

namespace App\Openai\ChatCompletion\CompletionResponse;

use App\Openai\ChatCompletion\CompletionRequest\JsonSchema\JsonSchemaInterface;
use App\Openai\ChatCompletion\Message\AssistantMessage;
use App\Openai\ChatCompletion\Message\SchemedAssistantMessage;
use Crell\Serde\Attributes as Serde;
use Crell\Serde\Renaming\Cases;

#[Serde\ClassSettings(
    renameWith: Cases::snake_case,
    omitNullFields: true
)]
final readonly class Choice
{
    /**
     * @param int              $index        The index of the choice in the list of choices
     * @param AssistantMessage $message      A chat completion message generated by the model
     * @param string           $finishReason The reason the model stopped generating tokens
     * @param ?array           $logprobs     Log probability information for the choice
     */
    public function __construct(
        public int $index,
        public AssistantMessage $message,
        public string $finishReason,
        public ?array $logprobs = null,
    ) {}

    public static function withToolCalls(
        self $oldChoice,
        array $toolCalls,
    ): self {
        return new self(
            $oldChoice->index,
            AssistantMessage::withToolCalls($oldChoice->message, $toolCalls),
            $oldChoice->finishReason,
            $oldChoice->logprobs,
        );
    }

    public static function withSchemedMessage(
        self $oldChoice,
        JsonSchemaInterface $schemedContent,
    ): self {
        return new self(
            $oldChoice->index,
            SchemedAssistantMessage::fromAssistantMessage(
                $oldChoice->message,
                $schemedContent,
            ),
            $oldChoice->finishReason,
            $oldChoice->logprobs,
        );
    }
}
